syntax = "proto3";

import "EchoAttributes.proto";

package testing;

message GpioState
{
    bool state = 1;
}

message Data
{
    bytes data = 1 [(bytes_size) = 32];
}

enum Peripheral
{
    gpio = 0;
    uart = 1;
    uartDuplexDma = 2;
}

message PeripheralType
{
    Peripheral peripheral = 1;
}

enum TestedMode
{
    reset = 0;
    active = 1;
    programming = 2;
}

message TestedModeMessage
{
    TestedMode mode = 1;
}

message StringMessage
{
    string message = 1 [(string_size) = 64];
}

service Tester
{
    option (service_id) = 1;

    rpc SetTestedMode(TestedModeMessage) returns (Nothing) { option (method_id) = 1; }
    rpc EnablePeripheral(PeripheralType) returns (Nothing) { option (method_id) = 2; }
}

service TesterObserver
{
    option (service_id) = 2;

    rpc TestedModeSet(StringMessage) returns (Nothing) { option (method_id) = 1; }
}

service Tested
{
    option (service_id) = 3;

    rpc Ping(Nothing) returns (Nothing) { option (method_id) = 1; }
    rpc EnablePeripheral(PeripheralType) returns (Nothing) { option (method_id) = 2; }
}

service TestedObserver
{
    option (service_id) = 4;

    rpc Pong(Nothing) returns (Nothing) { option (method_id) = 1; }
}

service GpioTester
{
    option (service_id) = 5;

    rpc SetGpio(GpioState) returns (Nothing) { option (method_id) = 1; }
}

service GpioTested
{
    option (service_id) = 6;

    rpc SetGpio(GpioState) returns (Nothing) { option (method_id) = 1; }
}

service GpioObserver
{
    option (service_id) = 7;

    rpc TesterGpioChanged(GpioState) returns (Nothing) { option (method_id) = 1; }
    rpc TestedGpioChanged(GpioState) returns (Nothing) { option (method_id) = 2; }
}

service UartTester
{
    option (service_id) = 8;

    rpc SendData(Data) returns (Nothing) { option (method_id) = 1; }
}

service UartTested
{
    option (service_id) = 9;

    rpc SendData(Data) returns (Nothing) { option (method_id) = 1; }
}

service UartObserver
{
    option (service_id) = 10;

    rpc TesterReceivedData(Data) returns (Nothing) { option (method_id) = 1; }
    rpc TestedReceivedData(Data) returns (Nothing) { option (method_id) = 2; }
}
